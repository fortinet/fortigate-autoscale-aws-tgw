{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiGate Autoscale Solution (with Transit Gateway integration). This template deploys Fortinet FortiGate cluster integrated with Transit Gateway. Please see the documentation for more details. **WARNING** You will be billed for the FortiGate On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "ResourceTagPrefix": {
            "Type": "String",
            "AllowedPattern": "[0-9a-zA-Z@.#-]+",
            "MaxLength": 64,
            "ConstraintDescription": "Resource tag prefix can include numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64.",
            "Description": "A prefix for the tag key ResourceGroup on all resources. It's also used as the name prefix of all applicable resources. Can only contain numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "An alternative name prefix to  be used on a resource that the “Resource tag prefix” cannot apply to. Can only contain numbers, lowercase letters, and uppercase letters. Max length is 10."
        },
        "UniqueId": {
            "Type": "String",
            "MaxLength": "8",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and digits",
            "Description": "A suffix for any resource that must have a globally unique name per region. Can only contain numbers, lowercase letters, and uppercase letters. Max length is 8."
        },
        "S3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Deployment related resource bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the deployment package. Can contain numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "S3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Deployment related resource key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "Name of the S3 folder that stores the FortiGate Autoscale deployment resources. Can only contain numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). If provided, it must end with a forward slash (/)."
        },
        "AvailabilityZones": {
            "Description": "The list of Availability Zones to use for the subnets in the VPC. The FortiGate Autoscale solution uses two Availability Zones from your list and preserves the logical order you specify.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "VpcCidr": {
            "Type": "String",
            "Default": "192.168.0.0/16",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the FortiGate Autoscale VPC."
        },
        "PublicSubnet1Cidr": {
            "Type": "String",
            "Default": "192.168.0.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the subnet located in Availability Zone 1 where the FortiGate Autoscale instances will be deployed to."
        },
        "PublicSubnet2Cidr": {
            "Type": "String",
            "Default": "192.168.1.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the subnet located in Availability Zone 2 where the FortiGate Autoscale instances will be deployed to."
        },
        "FortiGateInstanceType": {
            "Type": "String",
            "Default": "c5.large",
            "AllowedValues": [
                "t2.small",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "Instance type to launch as FortiGate On-Demand instances. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/."
        },
        "FortiOSVersion": {
            "Type": "String",
            "Default": "LATEST",
            "AllowedValues": ["LATEST", "623"],
            "ConstraintDescription": "must be a valid FortiOS version from the selection.",
            "Description": "Supported FortiOS versions. The 'LATEST' version can be found in template parameter 'FortiGateKeyMap.FortiGateVersion' in the 'Mappings section."
        },
        "LifecycleHookTimeout": {
            "Type": "Number",
            "Default": 480,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The amount of time (in seconds) that can elapse before the FortiGate Autoscale lifecycle hook times out. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The Auto Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgDesiredCapacity": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "The number of FortiGate instances the group should have at any time. Must keep at least 2 FortiGates in the group for High Availability. Minimum is 2."
        },
        "FgtAsgMinSize": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Minimum number of FortiGate instances in the Auto Scaling Group. Minimum is 2."
        },
        "FgtAsgMaxSize": {
            "Type": "Number",
            "Default": 4,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Maximum number of FortiGate instances in the Auto Scaling Group. Minimum is 2."
        },
        "FgtAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FgtAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FgtAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "MaxLength": "128",
            "Description": "A secret key for the FortiGate instances to securely communicate with each other. Can contain numbers and letters. Max length is 128."
        },
        "FortiGateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Minimum is 1. Maximum is 65535. Do not use the FortiGate reserved ports.: 443, 541, 514, 703."
        },
        "FortiGateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is highly not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must specify an admin access key pair for FortiGate instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "HeartBeatInterval": {
            "Type": "Number",
            "Default": 30,
            "MinValue": 30,
            "MaxValue": 90,
            "ConstraintDescription": "must be a valid number between 30 and 90.",
            "Description": "The amount of time (in seconds) for FortiGate to send a heartbeat to the Autoscale handler. Minimum is 30. Maximum is 90."
        },
        "HeartBeatLossCount": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid number between 1 and 65535.",
            "Description": "Number of consecutively lost heartbeats. When the Heartbeat Loss Count has been reached, the VM is deemed unhealthy and fail-over activities will commence."
        },
        "TransitGatewaySupportOptions": {
            "Type": "String",
            "Default": "create one",
            "AllowedValues": ["create one", "use an existing one"],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Create a Transit Gateway for the FortiGate Autoscale VPC to attach to, or specify to use an existing one."
        },
        "TransitGatewayId": {
            "Type": "String",
            "Default": "",
            "Description": "If you use an existing Transit Gateway, specify the ID of the Transit Gateway that the FortiGate Autoscale VPC is attached to."
        },
        "BgpAsn": {
            "Type": "Number",
            "MinValue": 64512,
            "Default": 65000,
            "MaxValue": 65534,
            "Description": "The Border Gateway Protocol (BGP) Autonomous System Number of the Customer Gateway of each FortiGate instance in the Auto Scaling Group. This value ranges from 64512 to 65534."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "CreateTransitGateway": {
            "Fn::Equals": [
                {
                    "Ref": "TransitGatewaySupportOptions"
                },
                "create one"
            ]
        }
    },
    "Mappings": {
        "FortiGateKeyMap": {
            "FortiGateVersion": {
                "LATEST": "FGTVM64PAYG623",
                "623": "FGTVM64PAYG623"
            }
        },
        "AWSAMIRegionMap": {
            "AMI": {
                "FGTVM64PAYG623": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build8404 (6.2.3) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-0462507a813be3282.4"
            },
            "ap-northeast-1": {
                "FGTVM64PAYG623": "ami-0444162d604179bf6"
            },
            "ap-northeast-2": {
                "FGTVM64PAYG623": "ami-065b67d14c722617a"
            },
            "ap-southeast-1": {
                "FGTVM64PAYG623": "ami-0155fb808596ae522"
            },
            "ap-southeast-2": {
                "FGTVM64PAYG623": "ami-0b67711c6be07aa0b"
            },
            "ap-south-1": {
                "FGTVM64PAYG623": "ami-0f6693857523585b8"
            },
            "sa-east-1": {
                "FGTVM64PAYG623": "ami-04de901f24e8532db"
            },
            "eu-west-1": {
                "FGTVM64PAYG623": "ami-0874d1d29263b27ff"
            },
            "eu-west-2": {
                "FGTVM64PAYG623": "ami-04eba63bb19dbeebe"
            },
            "eu-west-3": {
                "FGTVM64PAYG623": "ami-0c104a0848b644152"
            },
            "eu-central-1": {
                "FGTVM64PAYG623": "ami-0c380ca68f2b1f6e8"
            },
            "ca-central-1": {
                "FGTVM64PAYG623": "ami-099941e57393c2225"
            },
            "us-east-1": {
                "FGTVM64PAYG623": "ami-027f258cda3df62de"
            },
            "us-east-2": {
                "FGTVM64PAYG623": "ami-05a4ac8312f7911b9"
            },
            "us-west-1": {
                "FGTVM64PAYG623": "ami-0f54d37e47fa994a0"
            },
            "us-west-2": {
                "FGTVM64PAYG623": "ami-02b9cc036cab1071d"
            },
            "us-gov-east-1": {
                "FGTVM64PAYG623": "ami-7d52b30c"
            },
            "us-gov-west-1": {
                "FGTVM64PAYG623": "ami-6d00430c"
            }
        },
        "ProtocolPortMap": {
            "HTTP": {
                "defaultport": "80"
            },
            "HTTPS": {
                "defaultport": "443"
            },
            "TCP": {
                "defaultport": "443"
            }
        }
    },
    "Resources": {
        "StackCreateNewTransitGateway": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "CreateTransitGateway",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-transit-gateway.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "5"
            }
        },
        "StackCreateNewVPC": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "VpcCidr": {
                        "Ref": "VpcCidr"
                    },
                    "PublicSubnet1Cidr": {
                        "Ref": "PublicSubnet1Cidr"
                    },
                    "PublicSubnet2Cidr": {
                        "Ref": "PublicSubnet2Cidr"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-new-vpc.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "5"
            }
        },
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-db-table.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtInstanceIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": ["s3:GetObject"],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${S3BucketName}/${S3KeyPrefix}*",
                                            {
                                                "S3BucketName": {
                                                    "Ref": "S3BucketName"
                                                },
                                                "S3KeyPrefix": {
                                                    "Ref": "S3KeyPrefix"
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "fortigate-autoscale-instance-policy"
                    }
                ]
            }
        },
        "FgtInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "FgtInstanceIamRole"
                    }
                ]
            }
        },
        "StackCreateFortiGateAutoScaleHandler": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "HandlerScriptTimeout": 300,
                    "ServiceScriptTimeout": 900,
                    "VpcEndPoint": {
                        "Ref": "FgtAsgVpcEndpoint"
                    },
                    "DbTableArnList": {
                        "Fn::GetAtt": ["StackCreateDynamoDBTable", "Outputs.TableArnList"]
                    },
                    "VpcId": {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                    },
                    "FortiGatePskSecret": {
                        "Ref": "FortiGatePskSecret"
                    },
                    "FortiGateAdminPort": {
                        "Ref": "FortiGateAdminPort"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "HeartBeatInterval": {
                        "Ref": "HeartBeatInterval"
                    },
                    "HeartBeatLossCount": {
                        "Ref": "HeartBeatLossCount"
                    },
                    "TransitGatewayId": {
                        "Fn::If": [
                            "CreateTransitGateway",
                            {
                                "Fn::GetAtt": [
                                    "StackCreateNewTransitGateway",
                                    "Outputs.TransitGatewayId"
                                ]
                            },
                            {
                                "Ref": "TransitGatewayId"
                            }
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-autoscale-handler.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "fortigate-autoscale-security-group"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "FgtAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgVpcEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                },
                "SubnetIds": [
                    {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet1Id"]
                    },
                    {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet2Id"]
                    }
                ],
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": [
                        "com.amazonaws.${region}.execute-api",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "FgtAsgSecurityGroup"
                    }
                ]
            }
        },
        "StackCreateNicAttachmentService": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "DbTableArn": {
                        "Fn::GetAtt": ["StackCreateDynamoDBTable", "Outputs.NicAttachmentTableArn"]
                    },
                    "VpcId": {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/add-nic-attachment-service.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StartNicAttachmentService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["StackCreateNicAttachmentService", "Outputs.CfnServiceProvider"]
                }
            }
        },
        "StackCreateTransitGatewayVpnHandler": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-tgw-vpn-handler.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": 10
            }
        },
        "StackCreateFortiGateAutoScalingGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "AsgSubnet1Id": {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet1Id"]
                    },
                    "AsgSubnet2Id": {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet2Id"]
                    },
                    "ELBV2TargetGroupARNs": "",
                    "InstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "InstanceProfileArn": {
                        "Fn::GetAtt": ["FgtInstanceProfile", "Arn"]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "SecurityGroupId": {
                        "Ref": "FgtAsgSecurityGroup"
                    },
                    "APIGatewayId": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.ApiGatewayId"
                        ]
                    },
                    "AsgHandlerFunctionName": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionName"
                        ]
                    },
                    "AsgHandlerFunctionArn": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionArn"
                        ]
                    },
                    "AsgHealthCheckGracePeriod": {
                        "Ref": "FgtAsgHealthCheckGracePeriod"
                    },
                    "AsgScaleInThreshold": {
                        "Ref": "FgtAsgScaleInThreshold"
                    },
                    "AsgScaleOutThreshold": {
                        "Ref": "FgtAsgScaleOutThreshold"
                    },
                    "AsgDesiredCapacity": 0,
                    "AsgMinSize": 0,
                    "AsgMaxSize": {
                        "Ref": "FgtAsgMaxSize"
                    },
                    "AsgCooldown": {
                        "Ref": "FgtAsgCooldown"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "DependOnCondition": {
                        "Fn::If": [
                            "CreateTransitGateway",
                            {
                                "Fn::GetAtt": [
                                    "StackCreateNewTransitGateway",
                                    "Outputs.TransitGatewayId"
                                ]
                            },
                            {
                                "Ref": "TransitGatewayId"
                            }
                        ]
                    },
                    "ProductAMI": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersion",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "ProductCode": ""
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-auto-scaling-group.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            },
            "DependsOn": ["StartNicAttachmentService", "FgtAsgHandlerIamPolicyTgwManagement"]
        },
        "StartFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "initiateAutoscale",
                "DesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacity"
                },
                "MinSize": {
                    "Ref": "FgtAsgMinSize"
                },
                "MaxSize": {
                    "Ref": "FgtAsgMaxSize"
                },
                "Subnet1": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet1Id"]
                },
                "Subnet1Pair": "",
                "Subnet2": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet2Id"]
                },
                "Subnet2Pair": ""
            },
            "DependsOn": ["StackCreateFortiGateAutoScalingGroup", "SaveSettings"]
        },
        "StopFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "stopAutoscale"
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler",
                "SaveSettings"
            ]
        },
        "SaveSettings": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "saveSettings",
                "DeploymentSettingsSaved": "true",
                "ResourceTagPrefix": {
                    "Ref": "ResourceTagPrefix"
                },
                "CustomIdentifier": {
                    "Ref": "CustomIdentifier"
                },
                "UniqueId": {
                    "Ref": "UniqueId"
                },
                "AssetStorageName": {
                    "Ref": "S3BucketName"
                },
                "AssetStorageKeyPrefix": {
                    "Fn::Sub": [
                        "${keyprefix}assets/",
                        {
                            "keyprefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                },
                "FortiGatePskSecret": {
                    "Ref": "FortiGatePskSecret"
                },
                "FortiGateAdminPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "FortiGateSyncInterface": "port1",
                "LifecycleHookTimeout": {
                    "Ref": "LifecycleHookTimeout"
                },
                "MasterElectionNoWait": "true",
                "HeartBeatInterval": {
                    "Ref": "HeartBeatInterval"
                },
                "HeartBeatLossCount": {
                    "Ref": "HeartBeatLossCount"
                },
                "AutoscaleHandlerUrl": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerApiGatewayUrl"
                    ]
                },
                "MasterAutoScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupName"
                    ]
                },
                "PAYGAutoScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupName"
                    ]
                },
                "BYOLAutoScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupName"
                    ]
                },
                "RequiredConfigset": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.RequiredConfigsetList"
                    ]
                },
                "BgpAsn": {
                    "Ref": "BgpAsn"
                },
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "TransitGatewayRouteTableInbound": {
                    "Ref": "TransitGatewayRouteTableInbound"
                },
                "TransitGatewayRouteTableOutbound": {
                    "Ref": "TransitGatewayRouteTableOutbound"
                },
                "EnableTransitGatewayVpn": "true",
                "EnableSecondNic": "false",
                "EnableExternalElb": "false",
                "EnableInternalElb": "false",
                "InternalElbDns": "",
                "TransitGatewayVpnHandlerName": {
                    "Fn::GetAtt": ["StackCreateTransitGatewayVpnHandler", "Outputs.HandlerName"]
                }
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler"
            ]
        },
        "FgtAsgHandlerIamPolicyTgwManagement": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DisassociateTransitGatewayRouteTable",
                                "ec2:ModifyTransitGatewayVpcAttachment",
                                "ec2:DisableTransitGatewayRouteTablePropagation",
                                "ec2:CreateTransitGatewayRouteTable",
                                "ec2:AcceptTransitGatewayVpcAttachment",
                                "ec2:ReplaceTransitGatewayRoute",
                                "ec2:DeleteTransitGatewayRouteTable",
                                "ec2:CreateTransitGatewayRoute",
                                "ec2:DeleteTransitGatewayRoute",
                                "ec2:CreateTransitGatewayVpcAttachment",
                                "ec2:DeleteTransitGatewayVpcAttachment",
                                "ec2:AssociateTransitGatewayRouteTable",
                                "ec2:RejectTransitGatewayVpcAttachment",
                                "ec2:EnableTransitGatewayRouteTablePropagation"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": [
                                        "arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:transit-gateway-route-table/*",
                                        {
                                            "AWS_REGION": {
                                                "Ref": "AWS::Region"
                                            },
                                            "AWS_ACCOUNT_ID": {
                                                "Ref": "AWS::AccountId"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": [
                                        "arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:vpc/*",
                                        {
                                            "AWS_REGION": {
                                                "Ref": "AWS::Region"
                                            },
                                            "AWS_ACCOUNT_ID": {
                                                "Ref": "AWS::AccountId"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": [
                                        "arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:transit-gateway/*",
                                        {
                                            "AWS_REGION": {
                                                "Ref": "AWS::Region"
                                            },
                                            "AWS_ACCOUNT_ID": {
                                                "Ref": "AWS::AccountId"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": [
                                        "arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:transit-gateway-attachment/*",
                                        {
                                            "AWS_REGION": {
                                                "Ref": "AWS::Region"
                                            },
                                            "AWS_ACCOUNT_ID": {
                                                "Ref": "AWS::AccountId"
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:ExportTransitGatewayRoutes",
                                "ec2:DescribeVpnConnections",
                                "ec2:GetTransitGatewayAttachmentPropagations",
                                "ec2:DescribeTransitGateways",
                                "ec2:CreateCustomerGateway",
                                "ec2:DescribeCustomerGateways",
                                "ec2:SearchTransitGatewayRoutes",
                                "ec2:DescribeTransitGatewayAttachments",
                                "ec2:DescribeTransitGatewayRouteTables",
                                "ec2:GetTransitGatewayRouteTablePropagations",
                                "ec2:DescribeTransitGatewayVpcAttachments",
                                "ec2:DeleteVpnConnection",
                                "ec2:GetTransitGatewayRouteTableAssociations",
                                "ec2:CreateVpnConnection"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "ec2:DeleteCustomerGateway",
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:customer-gateway/*",
                                    {
                                        "AWS_REGION": {
                                            "Ref": "AWS::Region"
                                        },
                                        "AWS_ACCOUNT_ID": {
                                            "Ref": "AWS::AccountId"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": ["lambda:InvokeFunction", "lambda:InvokeAsync"],
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:${CUSTOM_ID}-${UNIQUE_ID}*",
                                    {
                                        "AWS_REGION": {
                                            "Ref": "AWS::Region"
                                        },
                                        "AWS_ACCOUNT_ID": {
                                            "Ref": "AWS::AccountId"
                                        },
                                        "CUSTOM_ID": {
                                            "Ref": "CustomIdentifier"
                                        },
                                        "UNIQUE_ID": {
                                            "Ref": "UniqueId"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "fortigate-autoscale-transit-gateway-management-policy",
                "Roles": [
                    {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerIamRoleName"
                        ]
                    }
                ]
            },
            "DependsOn": ["StackCreateFortiGateAutoScaleHandler"]
        },
        "TransitGatewayAttachmentFgtVPC": {
            "Type": "AWS::EC2::TransitGatewayAttachment",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "VpcId": {
                    "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.VpcId"]
                },
                "SubnetIds": [
                    {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet1Id"]
                    },
                    {
                        "Fn::GetAtt": ["StackCreateNewVPC", "Outputs.PublicSubnet2Id"]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-attachment-fortigate-vpc"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayRouteTableInbound": {
            "Type": "AWS::EC2::TransitGatewayRouteTable",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-route-table-inbound"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayRouteTableOutbound": {
            "Type": "AWS::EC2::TransitGatewayRouteTable",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-route-table-outbound"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayAssociationFgtAsgVPC": {
            "Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
            "Properties": {
                "TransitGatewayAttachmentId": {
                    "Ref": "TransitGatewayAttachmentFgtVPC"
                },
                "TransitGatewayRouteTableId": {
                    "Ref": "TransitGatewayRouteTableOutbound"
                }
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Resource tagging configuration"
                    },
                    "Parameters": ["ResourceTagPrefix", "CustomIdentifier"]
                },
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VpcCidr",
                        "PublicSubnet1Cidr",
                        "PublicSubnet2Cidr"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate configuration"
                    },
                    "Parameters": [
                        "FortiGateInstanceType",
                        "FortiOSVersion",
                        "FortiGatePskSecret",
                        "FortiGateAdminPort",
                        "FortiGateAdminCidr",
                        "KeyPairName",
                        "BgpAsn"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate auto scaling group configuration"
                    },
                    "Parameters": [
                        "LifecycleHookTimeout",
                        "FgtAsgDesiredCapacity",
                        "FgtAsgMinSize",
                        "FgtAsgMaxSize",
                        "FgtAsgHealthCheckGracePeriod",
                        "FgtAsgCooldown",
                        "FgtAsgScaleOutThreshold",
                        "FgtAsgScaleInThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "Transit Gateway configuration"
                    },
                    "Parameters": ["TransitGatewaySupportOptions", "TransitGatewayId"]
                },
                {
                    "Label": {
                        "default": "Failover management configuration"
                    },
                    "Parameters": ["HeartBeatLossCount", "HeartBeatInterval"]
                },
                {
                    "Label": {
                        "default": "Deployment resources configuration"
                    },
                    "Parameters": ["S3BucketName", "S3KeyPrefix"]
                }
            ],
            "ParameterLabels": {
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VpcCidr": {
                    "default": "VPC CIDR"
                },
                "PublicSubnet1Cidr": {
                    "default": "Autoscale subnet 1 CIDR"
                },
                "PublicSubnet2Cidr": {
                    "default": "Autoscale subnet 2 CIDR"
                },
                "FortiGateInstanceType": {
                    "default": "Instance type"
                },
                "FortiOSVersion": {
                    "default": "FortiOS version"
                },
                "S3BucketName": {
                    "default": "S3 bucket name"
                },
                "S3KeyPrefix": {
                    "default": "S3 resource folder"
                },
                "LifecycleHookTimeout": {
                    "default": "Instance lifecycle timeout"
                },
                "FgtAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FgtAsgDesiredCapacity": {
                    "default": "Desired capacity"
                },
                "FgtAsgMinSize": {
                    "default": "Minimum group size"
                },
                "FgtAsgMaxSize": {
                    "default": "Maximum group size"
                },
                "FgtAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FgtAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FgtAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiGateAdminPort": {
                    "default": "Admin port"
                },
                "FortiGateAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "FortiGatePskSecret": {
                    "default": "FortiGate PSK secret"
                },
                "HeartBeatInterval": {
                    "default": "Heart beat interval"
                },
                "HeartBeatLossCount": {
                    "default": "Heart beat loss count"
                },
                "TransitGatewaySupportOptions": {
                    "default": "Transit Gateway support"
                },
                "TransitGatewayId": {
                    "default": "Transit Gateway ID"
                },
                "ResourceTagPrefix": {
                    "default": "Resource tag prefix"
                },
                "BgpAsn": {
                    "default": "BGP ASN"
                }
            }
        }
    },
    "Outputs": {
        "CustomIdentifier": {
            "Description": "A custom identifier as a resource name prefix.",
            "Value": {
                "Ref": "CustomIdentifier"
            }
        },
        "UniqueID": {
            "Description": "A globally unique ID for your stack.",
            "Value": {
                "Fn::Select": [
                    0,
                    {
                        "Fn::Split": [
                            "-",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "/",
                                            {
                                                "Ref": "AWS::StackId"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    }
}
